{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dosyalar\\\\ToDOList\\\\todolist\\\\src\\\\components\\\\Todo.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { GrFormClose, GrFormEdit, GrFormCheckmark } from \"react-icons/gr\";\nimport { useTodoLayerValue } from \"../context/TodoContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Todo = _ref => {\n  _s();\n\n  let {\n    todo\n  } = _ref;\n  const [{}, dispatch] = useTodoLayerValue();\n  const [editable, setEditable] = useState(false);\n  const [content, setContent] = useState(todo.content);\n\n  const removeTodo = todoId => {\n    dispatch({\n      type: 'REMOVE_TODO',\n      payload: todoId\n    });\n  };\n\n  const completeTodo = todoId => {\n    dispatch({\n      type: 'COMPLETE_TODO',\n      payload: todoId\n    });\n  };\n\n  const todoStyle = clsx({\n    [\"todo-row\"]: true,\n    [\"completed\"]: todo.isComplete\n  });\n\n  const updateTodo = (todoId, newValue) => {\n    dispatch({\n      type: 'UPDATE_TODO',\n      payload: {\n        todoId,\n        newValue\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: todoStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => editable ? '' : completeTodo(todo.id),\n      children: editable ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: content,\n        onChange: event => setContent(event.target.value),\n        clasname: \"todo-input-edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }, this) : todo.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-icons\",\n      children: [/*#__PURE__*/_jsxDEV(GrFormClose, {\n        className: \"todo-icon\",\n        onClick: () => removeTodo(todo.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), editable ? /*#__PURE__*/_jsxDEV(GrFormCheckmark, {\n        className: \"todo-icon\",\n        onClick: () => {\n          updateTodo({\n            todoId: todo.id,\n            newValue: content\n          });\n          setContent(\"\");\n          setEditable(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 14\n      }, this) : /*#__PURE__*/_jsxDEV(GrFormEdit, {\n        className: \"todo-icon\",\n        onClick: () => setEditable(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Todo, \"M0oY0fYpBfvfJSr95M7w43O09+0=\", false, function () {\n  return [useTodoLayerValue];\n});\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["D:/Dosyalar/ToDOList/todolist/src/components/Todo.jsx"],"names":["React","useState","clsx","GrFormClose","GrFormEdit","GrFormCheckmark","useTodoLayerValue","Todo","todo","dispatch","editable","setEditable","content","setContent","removeTodo","todoId","type","payload","completeTodo","todoStyle","isComplete","updateTodo","newValue","id","event","target","value"],"mappings":"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","sourcesContent":["import React, {useState}from 'react'\r\nimport clsx from 'clsx'\r\nimport { GrFormClose, GrFormEdit, GrFormCheckmark } from  \"react-icons/gr\";\r\nimport { useTodoLayerValue } from \"../context/TodoContext\"\r\n\r\nconst Todo = ( {todo} ) => {\r\n\r\n    const [{}, dispatch] = useTodoLayerValue();\r\n    const [editable, setEditable] = useState(false);\r\n    const [content, setContent] = useState(todo.content);\r\n\r\n    const removeTodo = todoId =>{\r\n      dispatch({\r\n        type: 'REMOVE_TODO',\r\n        payload: todoId,\r\n      });\r\n    }\r\n\r\n    const completeTodo = (todoId) => {\r\n\r\n     dispatch({\r\n      type: 'COMPLETE_TODO',\r\n      payload: todoId,\r\n     });\r\n    }\r\n\r\n    const todoStyle = clsx({\r\n      [\"todo-row\"]: true, \r\n      [\"completed\"]: todo.isComplete,\r\n    })\r\n\r\n    const updateTodo = (todoId, newValue) =>{\r\n      dispatch({\r\n        type: 'UPDATE_TODO',\r\n        payload:{\r\n          todoId, \r\n          newValue,\r\n        },\r\n      })\r\n    }\r\n\r\n  return (\r\n    <div className={todoStyle}>\r\n      <div onClick={() => (editable ? '' : completeTodo(todo.id))}>\r\n        {editable ? \r\n          (<input type=\"text\" \r\n          value={content} \r\n          onChange={event => setContent(event.target.value)} \r\n          clasname=\"todo-input-edit\"\r\n          />)\r\n          : \r\n          (todo.content)\r\n        }\r\n      </div>\r\n      <div className=\"todo-icons\">\r\n        <GrFormClose \r\n        className=\"todo-icon\"\r\n        onClick={() => removeTodo(todo.id)} \r\n        />\r\n          {\r\n            editable ? \r\n            (<GrFormCheckmark className=\"todo-icon\" onClick={()=> {\r\n              updateTodo({\r\n                todoId: todo.id,\r\n                newValue: content\r\n              })\r\n\r\n              setContent(\"\");\r\n              setEditable(false) \r\n            }} /> )\r\n            : \r\n            (<GrFormEdit className=\"todo-icon\" onClick={() => setEditable(true)}/>)\r\n          }\r\n        \r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Todo"]},"metadata":{},"sourceType":"module"}